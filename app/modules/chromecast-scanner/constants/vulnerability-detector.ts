// app/modules/chromecast-scanner/constants/vulnerability-detector.ts - Improved vulnerability detection
import { ChromecastDevice, DeviceSignature } from "../types";
import { DeviceType } from "./service-identifiers";
import { VULNERABILITIES } from "./vulnerabilities";

/**
 * Check device for vulnerabilities based on device type, firmware version, and other characteristics
 * @param device The device to check
 * @param deviceSignature Identified device signature (if available)
 * @returns Object containing vulnerability IDs and details
 */
export function checkDeviceVulnerabilities(
  device: ChromecastDevice,
  deviceSignature: DeviceSignature | null
): {
  vulnerabilityIds: string[];
  vulnerabilityDetails: string[];
  recommendations: Record<string, string>;
} {
  const vulnerabilityIds: string[] = [];
  const vulnerabilityDetails: string[] = [];

  // Perform checks for all Chromecast devices
  checkChromecastVulnerabilities(
    device,
    deviceSignature,
    vulnerabilityIds,
    vulnerabilityDetails
  );

  // Check for device signature-based vulnerabilities
  if (deviceSignature) {
    checkSignatureVulnerabilities(
      device,
      deviceSignature,
      vulnerabilityIds,
      vulnerabilityDetails
    );
  }

  // Generic checks for all devices
  checkGenericVulnerabilities(device, vulnerabilityIds, vulnerabilityDetails);

  // NEW: Add advanced vulnerability checks for specific device types
  checkAdvancedVulnerabilities(
    device,
    deviceSignature,
    vulnerabilityIds,
    vulnerabilityDetails
  );

  // Ensure we have unique vulnerability IDs
  const uniqueVulnerabilityIds = [...new Set(vulnerabilityIds)];

  // Create recommendations object
  const recommendations: Record<string, string> = {};
  uniqueVulnerabilityIds.forEach((id) => {
    if (VULNERABILITIES[id]) {
      recommendations[id] = VULNERABILITIES[id].recommendation;
    }
  });

  return {
    vulnerabilityIds: uniqueVulnerabilityIds,
    vulnerabilityDetails,
    recommendations,
  };
}

/**
 * Check Chromecast-specific vulnerabilities
 */
function checkChromecastVulnerabilities(
  device: ChromecastDevice,
  deviceSignature: DeviceSignature | null,
  vulnerabilityIds: string[],
  vulnerabilityDetails: string[]
): void {
  // Check for common Chromecast vulnerabilities

  // Check for HTTP protocol (should be HTTPS)
  if (device.port === 80 || device.port === 8008) {
    vulnerabilityIds.push("INSECURE_HTTP");
    vulnerabilityDetails.push(
      "Device uses unencrypted HTTP for local API communication instead of HTTPS"
    );
  }

  // Check if device responds on non-standard ports
  if (
    device.port &&
    device.port !== 8008 &&
    device.port !== 8009 &&
    device.port !== 80 &&
    device.port !== 443
  ) {
    vulnerabilityIds.push("NON_STANDARD_PORT");
    vulnerabilityDetails.push(
      `Device is using non-standard port ${device.port} for Chromecast services`
    );
  }

  // Check mDNS information disclosure
  if (device.serviceTypes && device.serviceTypes.length > 0) {
    vulnerabilityIds.push("MDNS_INFORMATION_DISCLOSURE");
    vulnerabilityDetails.push(
      "Device is broadcasting sensitive information through mDNS service advertisements"
    );
  }

  // All Chromecast devices are vulnerable to cast control without authentication
  vulnerabilityIds.push("CAST_CONTROL");
  vulnerabilityDetails.push(
    "Any device on the same network can control this Chromecast without authentication"
  );

  // Check for DNS rebinding vulnerability (older Chromecast devices)
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.CHROMECAST ||
      deviceSignature.deviceType === DeviceType.CHROMECAST_ULTRA) &&
    (!device.firmwareVersion ||
      deviceSignature.vulnerableVersions?.includes(device.firmwareVersion))
  ) {
    vulnerabilityIds.push("DNS_REBINDING");
    vulnerabilityDetails.push(
      "Device may be vulnerable to DNS rebinding attacks that can allow remote control"
    );
  }

  // Older Chromecast devices are vulnerable to unauthenticated API access
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.CHROMECAST ||
      deviceSignature.deviceType === DeviceType.CHROMECAST_AUDIO ||
      deviceSignature.deviceType === DeviceType.CHROMECAST_ULTRA) &&
    (!device.firmwareVersion || parseFloat(device.firmwareVersion) < 1.42)
  ) {
    vulnerabilityIds.push("UNAUTHENTICATED_API_ACCESS");
    vulnerabilityDetails.push(
      "Device allows unauthenticated access to local API endpoints that should require authentication"
    );
  }

  // Check for deauth name overflow vulnerability on first and second gen devices
  if (
    deviceSignature &&
    (deviceSignature.model.includes("1st generation") ||
      deviceSignature.model.includes("2nd generation")) &&
    (!device.firmwareVersion || parseFloat(device.firmwareVersion) < 1.36)
  ) {
    vulnerabilityIds.push("DEAUTH_NAME_OVERFLOW");
    vulnerabilityDetails.push(
      "Older Chromecast is vulnerable to buffer overflow attacks via specially crafted Wi-Fi network names"
    );
  }

  // Google Home/Nest devices with voice capabilities have specific vulnerabilities
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.GOOGLE_HOME ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MINI ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_HUB ||
      deviceSignature.deviceType === DeviceType.NEST_HUB_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_MINI)
  ) {
    // Voice-enabled devices may have sound notification attacks
    vulnerabilityIds.push("SOUND_NOTIFICATION_ATTACK");
    vulnerabilityDetails.push(
      "Voice-enabled device can be triggered to play sounds at high volume by attackers on the same network"
    );

    // Devices with screens may have lockscreen bypass issues
    if (
      deviceSignature.deviceType === DeviceType.NEST_HUB ||
      deviceSignature.deviceType === DeviceType.NEST_HUB_MAX
    ) {
      vulnerabilityIds.push("LOCKSCREEN_BYPASS");
      vulnerabilityDetails.push(
        "Smart display may allow certain voice commands to bypass locked device restrictions"
      );

      vulnerabilityIds.push("AMBIENT_MODE_DATA_LEAK");
      vulnerabilityDetails.push(
        "Ambient mode may reveal sensitive information from linked accounts to anyone with physical access"
      );
    }
  }
}

/**
 * Check vulnerabilities based on identified device signature
 */
function checkSignatureVulnerabilities(
  device: ChromecastDevice,
  deviceSignature: DeviceSignature,
  vulnerabilityIds: string[],
  vulnerabilityDetails: string[]
): void {
  // Check if device has known firmware vulnerabilities based on version
  if (
    device.firmwareVersion &&
    deviceSignature.vulnerableVersions?.includes(device.firmwareVersion)
  ) {
    vulnerabilityIds.push("OUTDATED_FIRMWARE");
    vulnerabilityDetails.push(
      `${deviceSignature.manufacturer} ${deviceSignature.model} is running vulnerable firmware version ${device.firmwareVersion}`
    );

    if (deviceSignature.recommendedFirmware) {
      vulnerabilityDetails.push(
        `Recommendation: Update to ${deviceSignature.recommendedFirmware}`
      );
    }
  } else if (!device.firmwareVersion && deviceSignature.vulnerableVersions) {
    // If we can't detect firmware version but device has known vulnerabilities, flag it
    vulnerabilityIds.push("OUTDATED_FIRMWARE");
    vulnerabilityDetails.push(
      `${deviceSignature.manufacturer} ${deviceSignature.model} firmware version could not be detected - may be vulnerable`
    );

    if (deviceSignature.recommendedFirmware) {
      vulnerabilityDetails.push(
        `Recommendation: Verify you're running ${deviceSignature.recommendedFirmware} or later`
      );
    }
  }

  // Chromecast with Google TV specific vulnerabilities
  if (deviceSignature.deviceType === DeviceType.CHROMECAST_WITH_GOOGLE_TV) {
    vulnerabilityIds.push("CROSS_SITE_REQUEST_FORGERY");
    vulnerabilityDetails.push(
      "Chromecast with Google TV has web interfaces that may be vulnerable to cross-site request forgery"
    );

    // NEW: Extra vulnerabilities for Google TV devices
    vulnerabilityIds.push("APP_SIDELOADING_RISK");
    vulnerabilityDetails.push(
      "Google TV devices with Developer Mode enabled can sideload potentially malicious apps"
    );
  }

  // Smart TVs with built-in Chromecast have potential for more vulnerabilities
  if (
    deviceSignature.deviceType === DeviceType.SMART_TV ||
    deviceSignature.deviceType === DeviceType.ANDROID_TV ||
    deviceSignature.deviceType === DeviceType.VIZIO_SMARTCAST
  ) {
    vulnerabilityIds.push("OPEN_PORTS");
    vulnerabilityDetails.push(
      "Smart TVs with Chromecast built-in often have additional open ports that may be exploitable"
    );
  }

  // NVIDIA Shield specific vulnerabilities
  if (deviceSignature.deviceType === DeviceType.NVIDIA_SHIELD) {
    vulnerabilityIds.push("INSECURE_HTTP");
    vulnerabilityDetails.push(
      "NVIDIA Shield may expose additional debugging endpoints over HTTP"
    );
  }
}

/**
 * Generic vulnerability checks for all devices
 */
function checkGenericVulnerabilities(
  device: ChromecastDevice,
  vulnerabilityIds: string[],
  vulnerabilityDetails: string[]
): void {
  // Check for unencrypted media transport (all Chromecast devices)
  if (device.port === 8009) {
    // Port 8009 is the standard RAOP port used for sending media
    vulnerabilityIds.push("UNENCRYPTED_MEDIA_TRANSPORT");
    vulnerabilityDetails.push(
      "Device may receive unencrypted media content over the local network"
    );
  }

  // Check for potential DDoS vulnerabilities
  if (
    device.serviceTypes &&
    device.serviceTypes.some(
      (type) =>
        type.includes("_googlecast") || type.includes("_androidtvremote")
    )
  ) {
    vulnerabilityIds.push("DDOS_VULNERABILITY");
    vulnerabilityDetails.push(
      "Device could potentially be used in amplification attacks if exposed to the internet"
    );
  }

  // Almost all Chromecast devices are vulnerable to disconnect attacks
  vulnerabilityIds.push("DISCONNECT_ATTACK");
  vulnerabilityDetails.push(
    "Any device on the same network can force disconnect of currently playing content"
  );

  // Check if device is likely to have guest mode enabled
  if (
    device.name &&
    (device.name.toLowerCase().includes("chromecast") ||
      device.name.toLowerCase().includes("google"))
  ) {
    vulnerabilityIds.push("GUEST_MODE_VULNERABILITY");
    vulnerabilityDetails.push(
      "Device may have Guest Mode enabled which is vulnerable to ultrasonic pairing bypass attacks"
    );
  }

  // NEW: Check if the device is protected
  if (device.isProtected) {
    vulnerabilityIds.push("PROTECTED_DEVICE");
    vulnerabilityDetails.push(
      "Device is password protected but could still be vulnerable to brute force attacks"
    );
  }
}

/**
 * NEW: Advanced vulnerability checks for specific device types
 */
function checkAdvancedVulnerabilities(
  device: ChromecastDevice,
  deviceSignature: DeviceSignature | null,
  vulnerabilityIds: string[],
  vulnerabilityDetails: string[]
): void {
  // Check for KRACK Wi-Fi vulnerability in older devices
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.CHROMECAST ||
      deviceSignature.deviceType === DeviceType.CHROMECAST_AUDIO) &&
    (!device.firmwareVersion || parseFloat(device.firmwareVersion) < 1.29)
  ) {
    vulnerabilityIds.push("KRACK_WIFI_VULNERABILITY");
    vulnerabilityDetails.push(
      "Older Chromecast devices are vulnerable to KRACK Wi-Fi attacks (CVE-2017-13077/78/79/80)"
    );
  }

  // Check for Bluetooth vulnerabilities in devices with Bluetooth capabilities
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.CHROMECAST_WITH_GOOGLE_TV ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MINI ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_HUB ||
      deviceSignature.deviceType === DeviceType.NEST_HUB_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_MINI)
  ) {
    vulnerabilityIds.push("BLUETOOTH_VULNERABILITY");
    vulnerabilityDetails.push(
      "Device has Bluetooth capabilities that could be exploited for device tracking or BlueBorne attacks"
    );
  }

  // Check for audio snippet recording in voice-enabled devices
  if (
    deviceSignature &&
    (deviceSignature.deviceType === DeviceType.GOOGLE_HOME ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MINI ||
      deviceSignature.deviceType === DeviceType.GOOGLE_HOME_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_HUB ||
      deviceSignature.deviceType === DeviceType.NEST_HUB_MAX ||
      deviceSignature.deviceType === DeviceType.NEST_MINI)
  ) {
    vulnerabilityIds.push("VOICE_RECORDING_PRIVACY");
    vulnerabilityDetails.push(
      "Voice-enabled device may record and store audio snippets which could contain sensitive information"
    );
  }

  // Check for network position vulnerabilities
  if (
    device.ipAddress &&
    (device.ipAddress.endsWith(".1") ||
      device.ipAddress.endsWith(".2") ||
      device.ipAddress.endsWith(".100") ||
      device.ipAddress.endsWith(".254"))
  ) {
    vulnerabilityIds.push("NETWORK_POSITION_VULNERABILITY");
    vulnerabilityDetails.push(
      "Device has a strategic network position (gateway-adjacent IP) that could be leveraged for Man-in-the-Middle attacks"
    );
  }

  // Specific TLS/SSL issues
  if (
    deviceSignature &&
    deviceSignature.deviceType === DeviceType.CHROMECAST &&
    (!device.firmwareVersion || parseFloat(device.firmwareVersion) < 1.32)
  ) {
    vulnerabilityIds.push("TLS_VULNERABILITY");
    vulnerabilityDetails.push(
      "Device may use outdated TLS versions or vulnerable cipher suites"
    );
  }
}

/**
 * Calculate security score based on vulnerabilities
 * @param device The device to score
 * @param vulnerabilityIds Identified vulnerability IDs
 * @returns Security score (0-100)
 */
export function calculateSecurityScore(
  device: ChromecastDevice,
  vulnerabilityIds: string[]
): number {
  // Start with perfect score
  let score = 100;

  // Deduct points for each vulnerability based on severity
  vulnerabilityIds.forEach((id) => {
    const vulnerability = VULNERABILITIES[id];
    if (vulnerability) {
      switch (vulnerability.severity) {
        case "critical":
          score -= 25;
          break;
        case "high":
          score -= 15;
          break;
        case "medium":
          score -= 10;
          break;
        case "low":
          score -= 5;
          break;
      }
    }
  });

  // Bonus for firmware version (if detected)
  if (device.firmwareVersion) {
    // Some minimal bonus for having detectable firmware
    score += 2;
  }

  // Bonus for newer Chromecast devices which are generally more secure
  if (device.name) {
    const deviceNameLower = device.name.toLowerCase();
    if (
      deviceNameLower.includes("google tv") ||
      deviceNameLower.includes("ultra") ||
      deviceNameLower.includes("nest hub")
    ) {
      score += 5;
    }
  }

  // Ensure score stays in 0-100 range
  return Math.max(0, Math.min(100, score));
}

export default {};
